enum Status {
  flying "flying"
  crashed "crashed"
  reached "reached"
}

declare record Position {
  x : int
  y : int
}

alias Position_bool_map: <Position,bool> map

internal state {
   status : Status = Status.flying;
   fuel : int = 1;
   position : Position = {y=0;x=0};
   islands : Position_bool_map = <|default: false>;
   ndiscount : int = 0;
   reward : int = 0;
}

action Move {
  pos : Position
  validate {validate_Move(this.pos)}
}

receive ( act : Move ) {
  let adx : int = abs((state.position.x - act.pos.x))
  let ady : int = abs((state.position.y - act.pos.y))
  let used_fuel : int = if ((adx == 1) && (ady == 0)) then 1 else if ((adx == 0) && (ady == 1)) then 1 else if ((adx == 1) && (ady == 1)) then 1 else (adx + ady)
   state.position = act.pos
  if((used_fuel > state.fuel)) then {
     state.reward = (0 - 10)
     state.status = Status.crashed
    return
  }
  if(((state.position.x == 2) && (state.position.y == 2))) then {
     state.reward = 1000
     state.status = Status.reached
    return
  }
  if(get(state.islands,state.position)) then {
    insert( state.islands , state.position=false )
     state.fuel = 1
  } else {
     state.fuel = (state.fuel - used_fuel)
  }
  if((state.fuel == 0)) then {
     state.reward = (0 - 10)
     state.status = Status.crashed
    return
  }
   state.ndiscount = (state.ndiscount + 1)
}

function validate_Move(pos:Position):bool {
  if((state.status != Status.flying)) then {
    return false
  }
  if(((pos.x == state.position.x) && (pos.y == state.position.y))) then {
    return false
  }
  if(((pos.x < 0) || (pos.x > 2))) then {
    return false
  }
  if(((pos.y < 0) || (pos.y > 2))) then {
    return false
  }
  if((abs((state.position.x - pos.x)) > 1)) then {
    return false
  }
  if((abs((state.position.y - pos.y)) > 1)) then {
    return false
  }
  return true
}

action SetState {
  pos : Position
  nmap : Position_bool_map
  nfuel : int
  validate {validate_SetState(this.pos,this.nmap,this.nfuel)}
}

receive ( act : SetState ) {
   state.fuel = act.nfuel
   state.position = act.pos
   state.islands = act.nmap
   state.status = Status.flying
   state.ndiscount = 0
   state.reward = 0
}

function validate_SetState(pos:Position,nmap:Position_bool_map,nfuel:int):bool {
  if(((nfuel <= 0) || (nfuel > 1))) then {
    return false
  }
  if(((pos.x < 0) || (pos.x > 2))) then {
    return false
  }
  if(((pos.y < 0) || (pos.y > 2))) then {
    return false
  }
  return true
}
